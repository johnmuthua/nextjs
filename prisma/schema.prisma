// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  username String @unique
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  email String? @unique
  image String?
  role Role @default(USER)
  questions Question[]
  answers Answer[]
  questionComments QuestionComment[]
  answerComments AnswerComment[]
  blogs BlogPost[]
  blogComments BlogComment[]
  profile Profile?
}

enum Role {
  USER
  ADMIN
  EDITOR
  REVIEWER
}


model Question {
id String @id @default(cuid())
  title String @unique 
  body String
  slug String @unique
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  likes Int?
  views Int?
  tags String?
  category Level @default(BEGINNER)
  published Status @default(DRAFT)
  Answers Answer[]
  comments QuestionComment[]

  author User @relation(fields: [authorId], references:[id])
  authorId String
}

enum Level {
  BEGINNER
  INTERMEDIATE
  EXPERT
  PROFESSIONAL
}

enum Status {
  PUBLISHED
  DRAFT
}

model Answer {
id String @id @default(cuid())
  body String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  likes Int
  comments AnswerComment[]
  author User @relation(fields: [authorId], references:[id])
  questions Question @relation(fields: [questionId], references:[id])
  authorId String
  questionId String
}

model QuestionComment {
id String @id @default(cuid())
  body String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  author User @relation(fields: [authorId], references:[id])
  questions Question @relation(fields: [questionId], references:[id])
  authorId String
  questionId String
}

model AnswerComment {
id String @id @default(cuid())
  body String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  author User @relation(fields: [authorId], references:[id])
  answer Answer @relation(fields: [answerId], references:[id])
  authorId String
  answerId String
}

//Blog 
model BlogPost {
id String @id @default(cuid())
  title String @unique 
  body String
  slug String @unique
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  likes Int?
  views Int?
  tags String?
  category Level @default(BEGINNER)
  published Status @default(DRAFT)
  comments BlogComment[]

  author User @relation(fields: [authorId], references:[id])
  authorId String
}

model BlogComment {
id String @id @default(cuid())
  body String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  likes Int

  author User @relation(fields: [authorId], references:[id])
  blogs BlogPost @relation(fields: [blogId], references:[id])
  authorId String
  blogId String
}

model Profile {
  id String @id @default(cuid())
  username String @unique
  githubUrl String @unique
  twitterUrl String @unique
  profilePicUrl String
  occupation String
  category Level @default(BEGINNER) 
  tech String
  user   User @relation(fields: [userId], references: [id])
  userId String
}